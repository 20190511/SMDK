-- DDL for the delete-update-snapshot-benchmark.  Note that 'DUSB'
-- is short for 'delete-update-snapshot-benchmark'.

file -inlinebatch END_OF_BATCH1

DROP PROCEDURE UpdateOneValuePblockId IF EXISTS;
DROP PROCEDURE DeleteOneValuePblockId IF EXISTS;
DROP PROCEDURE UpdateOneValuePmodId   IF EXISTS;
DROP PROCEDURE DeleteOneValuePmodId   IF EXISTS;
DROP PROCEDURE UpdateOneValuePid IF EXISTS;
DROP PROCEDURE DeleteOneValuePid IF EXISTS;
DROP PROCEDURE InsertOneRowPid   IF EXISTS;
DROP PROCEDURE UpdateOneValue    IF EXISTS;
DROP PROCEDURE DeleteOneValue    IF EXISTS;
DROP PROCEDURE InsertOneRow      IF EXISTS;
DROP PROCEDURE UpdateMultiValues IF EXISTS;
DROP PROCEDURE DeleteMultiValues IF EXISTS;
DROP PROCEDURE InsertFromSelect  IF EXISTS;

DROP TABLE DUSB_P3 IF EXISTS CASCADE;
DROP TABLE DUSB_P2 IF EXISTS CASCADE;
DROP TABLE DUSB_P1 IF EXISTS CASCADE;
DROP TABLE DUSB_R1 IF EXISTS CASCADE;

END_OF_BATCH1

-- Load all the classes from the jar, including the procedures that will
-- also need to be 'CREATE-ed' below
LOAD CLASSES dusbench.jar;

file -inlinebatch END_OF_BATCH2

-- A replicated table
CREATE TABLE DUSB_R1 (
  ID                 BIGINT NOT NULL PRIMARY KEY,
  BLOCK_ID           BIGINT,
  MOD_ID             BIGINT,
  TINY               TINYINT,
  SMALL              SMALLINT,
  INTEG              INTEGER,
  BIG                BIGINT,
  FLOT               FLOAT,
  DECML              DECIMAL,
  TIMESTMP           TIMESTAMP,
  VCHAR_INLINE       VARCHAR(14),
  VCHAR_INLINE_MAX   VARCHAR(63 BYTES),
  VCHAR_OUTLINE_MIN  VARCHAR(64 BYTES),
  VCHAR_OUTLINE      VARCHAR(20),
  VCHAR_DEFAULT      VARCHAR,
  VARBIN_INLINE      VARBINARY(32),
  VARBIN_INLINE_MAX  VARBINARY(63),
  VARBIN_OUTLINE_MIN VARBINARY(64),
  VARBIN_OUTLINE     VARBINARY(128),
  VARBIN_DEFAULT     VARBINARY,
  POINT              GEOGRAPHY_POINT,
  POLYGON            GEOGRAPHY  -- TODO: GEOGRAPHY(size)
);
CREATE INDEX IDX_DUSB_R1_MODID   ON DUSB_R1 (MOD_ID);
CREATE INDEX IDX_DUSB_R1_BLOCKID ON DUSB_R1 (BLOCK_ID);

-- A table partitioned on the ID column
CREATE TABLE DUSB_P1 (
  ID                 BIGINT NOT NULL PRIMARY KEY,
  BLOCK_ID           BIGINT,
  MOD_ID             BIGINT,
  TINY               TINYINT,
  SMALL              SMALLINT,
  INTEG              INTEGER,
  BIG                BIGINT,
  FLOT               FLOAT,
  DECML              DECIMAL,
  TIMESTMP           TIMESTAMP,
  VCHAR_INLINE       VARCHAR(14),
  VCHAR_INLINE_MAX   VARCHAR(63 BYTES),
  VCHAR_OUTLINE_MIN  VARCHAR(64 BYTES),
  VCHAR_OUTLINE      VARCHAR(20),
  VCHAR_DEFAULT      VARCHAR,
  VARBIN_INLINE      VARBINARY(32),
  VARBIN_INLINE_MAX  VARBINARY(63),
  VARBIN_OUTLINE_MIN VARBINARY(64),
  VARBIN_OUTLINE     VARBINARY(128),
  VARBIN_DEFAULT     VARBINARY,
  POINT              GEOGRAPHY_POINT,
  POLYGON            GEOGRAPHY  -- TODO: GEOGRAPHY(size)
);
PARTITION TABLE DUSB_P1 ON COLUMN ID;
CREATE INDEX IDX_DUSB_P1_MODID   ON DUSB_P1 (MOD_ID);
CREATE INDEX IDX_DUSB_P1_BLOCKID ON DUSB_P1 (BLOCK_ID);

-- A table partitioned on the MOD_ID column
CREATE TABLE DUSB_P2 (
  ID                 BIGINT NOT NULL,
  BLOCK_ID           BIGINT,
  MOD_ID             BIGINT NOT NULL,
  TINY               TINYINT,
  SMALL              SMALLINT,
  INTEG              INTEGER,
  BIG                BIGINT,
  FLOT               FLOAT,
  DECML              DECIMAL,
  TIMESTMP           TIMESTAMP,
  VCHAR_INLINE       VARCHAR(14),
  VCHAR_INLINE_MAX   VARCHAR(63 BYTES),
  VCHAR_OUTLINE_MIN  VARCHAR(64 BYTES),
  VCHAR_OUTLINE      VARCHAR(20),
  VCHAR_DEFAULT      VARCHAR,
  VARBIN_INLINE      VARBINARY(32),
  VARBIN_INLINE_MAX  VARBINARY(63),
  VARBIN_OUTLINE_MIN VARBINARY(64),
  VARBIN_OUTLINE     VARBINARY(128),
  VARBIN_DEFAULT     VARBINARY,
  POINT              GEOGRAPHY_POINT,
  POLYGON            GEOGRAPHY,  -- TODO: GEOGRAPHY(size),
  PRIMARY KEY (ID, MOD_ID)
);
PARTITION TABLE DUSB_P2 ON COLUMN MOD_ID;
CREATE INDEX IDX_DUSB_P2_ID      ON DUSB_P2 (ID);
CREATE INDEX IDX_DUSB_P2_MODID   ON DUSB_P2 (MOD_ID);
CREATE INDEX IDX_DUSB_P2_BLOCKID ON DUSB_P2 (BLOCK_ID);

END_OF_BATCH2

file -inlinebatch END_OF_BATCH3

-- A table partitioned on the BLOCK_ID column
CREATE TABLE DUSB_P3 (
  ID                 BIGINT NOT NULL,
  BLOCK_ID           BIGINT NOT NULL,
  MOD_ID             BIGINT,
  TINY               TINYINT,
  SMALL              SMALLINT,
  INTEG              INTEGER,
  BIG                BIGINT,
  FLOT               FLOAT,
  DECML              DECIMAL,
  TIMESTMP           TIMESTAMP,
  VCHAR_INLINE       VARCHAR(14),
  VCHAR_INLINE_MAX   VARCHAR(63 BYTES),
  VCHAR_OUTLINE_MIN  VARCHAR(64 BYTES),
  VCHAR_OUTLINE      VARCHAR(20),
  VCHAR_DEFAULT      VARCHAR,
  VARBIN_INLINE      VARBINARY(32),
  VARBIN_INLINE_MAX  VARBINARY(63),
  VARBIN_OUTLINE_MIN VARBINARY(64),
  VARBIN_OUTLINE     VARBINARY(128),
  VARBIN_DEFAULT     VARBINARY,
  POINT              GEOGRAPHY_POINT,
  POLYGON            GEOGRAPHY,  -- TODO: GEOGRAPHY(size),
  PRIMARY KEY (ID, BLOCK_ID)
);
PARTITION TABLE DUSB_P3 ON COLUMN BLOCK_ID;
CREATE INDEX IDX_DUSB_P3_ID      ON DUSB_P3 (ID);
CREATE INDEX IDX_DUSB_P3_MODID   ON DUSB_P3 (MOD_ID);
CREATE INDEX IDX_DUSB_P3_BLOCKID ON DUSB_P3 (BLOCK_ID);


CREATE PROCEDURE FROM CLASS procedures.InsertFromSelect;
CREATE PROCEDURE FROM CLASS procedures.DeleteMultiValues;
CREATE PROCEDURE FROM CLASS procedures.UpdateMultiValues;

CREATE PROCEDURE FROM CLASS procedures.InsertOneRow;
CREATE PROCEDURE FROM CLASS procedures.DeleteOneValue;
CREATE PROCEDURE FROM CLASS procedures.UpdateOneValue;

CREATE PROCEDURE PARTITION ON TABLE DUSB_P1 COLUMN ID
                 FROM CLASS procedures.InsertOneRowPid;

CREATE PROCEDURE PARTITION ON TABLE DUSB_P1 COLUMN ID
                 FROM CLASS procedures.DeleteOneValuePid;
CREATE PROCEDURE PARTITION ON TABLE DUSB_P2 COLUMN MOD_ID
                 FROM CLASS procedures.DeleteOneValuePmodId;
CREATE PROCEDURE PARTITION ON TABLE DUSB_P3 COLUMN BLOCK_ID
                 FROM CLASS procedures.DeleteOneValuePblockId;
CREATE PROCEDURE PARTITION ON TABLE DUSB_P1 COLUMN ID
                 FROM CLASS procedures.UpdateOneValuePid;
CREATE PROCEDURE PARTITION ON TABLE DUSB_P2 COLUMN MOD_ID
                 FROM CLASS procedures.UpdateOneValuePmodId;
CREATE PROCEDURE PARTITION ON TABLE DUSB_P3 COLUMN BLOCK_ID
                 FROM CLASS procedures.UpdateOneValuePblockId;

END_OF_BATCH3
